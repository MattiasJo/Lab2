package recipesearch;

import java.awt.*;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.util.List;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;
import se.chalmers.ait.dat215.lab2.*;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

public class RecipeSearchView extends javax.swing.JFrame implements PropertyChangeListener {

    private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);
    
    /**
     * Creates new form ExampleApplicationView
     */
    public RecipeSearchView() {
        initComponents();
        recipes = db.search(new SearchFilter(difficulty, maxTime, cuisine, maxPrice, typeOfFood));
        //pcs.firePropertyChange("search", true, false);        
        updateView();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        typeOfFoodPane = new javax.swing.JTabbedPane();
        allCategoriesScrollPane = new javax.swing.JScrollPane();
        allCategoriesPanel = new javax.swing.JPanel();
        meatScrollPane = new javax.swing.JScrollPane();
        meatPanel = new javax.swing.JPanel();
        fishScrollPane = new javax.swing.JScrollPane();
        fishPanel = new javax.swing.JPanel();
        vegoScrollPane = new javax.swing.JScrollPane();
        vegoPanel = new javax.swing.JPanel();
        chickenScrollPane = new javax.swing.JScrollPane();
        chickenPanel = new javax.swing.JPanel();
        maxTimeBox = new javax.swing.JComboBox();
        maxPriceBox = new javax.swing.JComboBox();
        difficultyBox = new javax.swing.JComboBox();
        cuisineBox = new javax.swing.JComboBox();
        maxTimeLabel = new javax.swing.JLabel();
        maxPriceLabel = new javax.swing.JLabel();
        cuisineLabel = new javax.swing.JLabel();
        difficultyLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("recipesearch/resources/RecipeSearch"); // NOI18N
        setTitle(bundle.getString("Application.title")); // NOI18N
        setMaximumSize(new java.awt.Dimension(754, 500));
        setMinimumSize(new java.awt.Dimension(754, 500));
        setName("applicationFrame"); // NOI18N
        setResizable(false);

        typeOfFoodPane.setMaximumSize(new java.awt.Dimension(742, 399));
        typeOfFoodPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                typeOfFoodPaneMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout allCategoriesPanelLayout = new javax.swing.GroupLayout(allCategoriesPanel);
        allCategoriesPanel.setLayout(allCategoriesPanelLayout);
        allCategoriesPanelLayout.setHorizontalGroup(
            allCategoriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 717, Short.MAX_VALUE)
        );
        allCategoriesPanelLayout.setVerticalGroup(
            allCategoriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 353, Short.MAX_VALUE)
        );

        allCategoriesScrollPane.setViewportView(allCategoriesPanel);

        typeOfFoodPane.addTab("Alla kategorier", allCategoriesScrollPane);

        javax.swing.GroupLayout meatPanelLayout = new javax.swing.GroupLayout(meatPanel);
        meatPanel.setLayout(meatPanelLayout);
        meatPanelLayout.setHorizontalGroup(
            meatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 717, Short.MAX_VALUE)
        );
        meatPanelLayout.setVerticalGroup(
            meatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 353, Short.MAX_VALUE)
        );

        meatScrollPane.setViewportView(meatPanel);

        typeOfFoodPane.addTab("Kött", meatScrollPane);

        javax.swing.GroupLayout fishPanelLayout = new javax.swing.GroupLayout(fishPanel);
        fishPanel.setLayout(fishPanelLayout);
        fishPanelLayout.setHorizontalGroup(
            fishPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 717, Short.MAX_VALUE)
        );
        fishPanelLayout.setVerticalGroup(
            fishPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 353, Short.MAX_VALUE)
        );

        fishScrollPane.setViewportView(fishPanel);

        typeOfFoodPane.addTab("Fisk", fishScrollPane);

        javax.swing.GroupLayout vegoPanelLayout = new javax.swing.GroupLayout(vegoPanel);
        vegoPanel.setLayout(vegoPanelLayout);
        vegoPanelLayout.setHorizontalGroup(
            vegoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 717, Short.MAX_VALUE)
        );
        vegoPanelLayout.setVerticalGroup(
            vegoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 353, Short.MAX_VALUE)
        );

        vegoScrollPane.setViewportView(vegoPanel);

        typeOfFoodPane.addTab("Vegetarisk", vegoScrollPane);

        javax.swing.GroupLayout chickenPanelLayout = new javax.swing.GroupLayout(chickenPanel);
        chickenPanel.setLayout(chickenPanelLayout);
        chickenPanelLayout.setHorizontalGroup(
            chickenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 717, Short.MAX_VALUE)
        );
        chickenPanelLayout.setVerticalGroup(
            chickenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 353, Short.MAX_VALUE)
        );

        chickenScrollPane.setViewportView(chickenPanel);

        typeOfFoodPane.addTab("Kyckling", chickenScrollPane);

        maxTimeBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "10", "20", "30", "40", "50", "60", "70", "80", "90", "100", "110", "120", "130", "140", "150" }));
        maxTimeBox.setAutoscrolls(true);
        maxTimeBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxTimeActionPerformed(evt);
            }
        });

        maxPriceBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "20", "40", "60", "80", "100", "150", "200", "250", "300" }));
        maxPriceBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxPriceActionPerformed(evt);
            }
        });

        difficultyBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "Lätt", "Mellan", "Svår" }));
        difficultyBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                difficultyActionPerformed(evt);
            }
        });

        cuisineBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "Sverige", "Grekland", "Indien", "Asien", "Afrika", "Frankrike" }));
        cuisineBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cuisineActionPerformed(evt);
            }
        });

        maxTimeLabel.setText("Max tid:");

        maxPriceLabel.setText("Max pris:");

        cuisineLabel.setText("Kök:");

        difficultyLabel.setText("Svårighetsgrad:");

        jLabel1.setText("min");

        jLabel2.setText("kr");

        java.util.ResourceBundle bundle1 = java.util.ResourceBundle.getBundle("recipesearch/resources/RecipeSearchView"); // NOI18N
        fileMenu.setText(bundle1.getString("fileMenu.text")); // NOI18N

        exitMenuItem.setText(bundle1.getString("exitApplicationMenuItem.text")); // NOI18N
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(bundle1.getString("helpMenu.text")); // NOI18N

        aboutMenuItem.setText(bundle1.getString("aboutMenuItem.text")); // NOI18N
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(typeOfFoodPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(maxTimeLabel)
                    .addComponent(maxPriceLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(maxTimeBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(maxPriceBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cuisineLabel)
                    .addComponent(difficultyLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(difficultyBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cuisineBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(57, 57, 57))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(maxTimeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)
                        .addComponent(maxTimeLabel))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(difficultyBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(difficultyLabel)))
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(maxPriceBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(maxPriceLabel)
                        .addComponent(jLabel2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cuisineLabel)
                        .addComponent(cuisineBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(8, 8, 8)
                .addComponent(typeOfFoodPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        new RecipeSearchAboutBox(this).setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed
    
    private void typeOfFoodPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_typeOfFoodPaneMouseClicked
        typeOfFood=typeOfFoodPane.getTitleAt(typeOfFoodPane.getSelectedIndex());
        if(typeOfFood.equals("Alla kategorier")){
            typeOfFood=null;
        }
        updateView();
    }//GEN-LAST:event_typeOfFoodPaneMouseClicked

    private void cuisineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cuisineActionPerformed
        cuisine = cuisineBox.getSelectedItem().toString();
        updateView();
    }//GEN-LAST:event_cuisineActionPerformed

    private void difficultyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_difficultyActionPerformed
        difficulty = difficultyBox.getSelectedItem().toString();
        updateView();
    }//GEN-LAST:event_difficultyActionPerformed

    private void maxPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxPriceActionPerformed
        maxPrice = Integer.parseInt(maxPriceBox.getSelectedItem().toString());
        updateView();
    }//GEN-LAST:event_maxPriceActionPerformed

    private void maxTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxTimeActionPerformed
        maxTime = Integer.parseInt(maxTimeBox.getSelectedItem().toString());
        updateView();
    }//GEN-LAST:event_maxTimeActionPerformed

    public void updateView() {
            switch(typeOfFoodPane.getTitleAt(typeOfFoodPane.getSelectedIndex())){
                case "Alla kategorier":
                        resultsPanel = allCategoriesPanel;
                        break;
                case "Kött":
                        resultsPanel = meatPanel;
                        break;
                case "Fisk":
                        resultsPanel = fishPanel;
                        break;
                case "Vegetarisk":
                        resultsPanel = vegoPanel;
                        break;
                case "Kyckling":
                        resultsPanel = chickenPanel;
                        break;
                default:
                        resultsPanel = meatPanel;
                        break;
            }
        recipes = db.search(new SearchFilter(difficulty, maxTime, cuisine, maxPrice, typeOfFood));
        resultsPanel.removeAll();
        resultsPanel.setLayout(new GridLayout(0,3));
        for (Recipe recipe : recipes) {
            if (recipe.getMainIngredient().equals(typeOfFood) || typeOfFood==null) {
                //RecipePanel rp = new RecipePanel(recipe);
                //rp.setPreferredSize(new Dimension(100,110));
                //rp.addObserver(this);
                //resultsPanel.add(rp);
                RecipePanelTest rpt = new RecipePanelTest(recipe);
                //rpt.setPreferredSize(new Dimension(100,110));
                rpt.addObserver(this);
                resultsPanel.add(rpt);
            }           
        }
    }
    
    public void addObserver(PropertyChangeListener observer) { 
        this.pcs.addPropertyChangeListener(observer);
    }
    
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        pcs.firePropertyChange(evt.getPropertyName(), evt.getOldValue(), evt.getNewValue());;
    }
    
    RecipeDatabase db = RecipeDatabase.getSharedInstance();
    javax.swing.JPanel resultsPanel;
    private String typeOfFood;
    private List<Recipe> recipes;
    private String cuisine, difficulty;
    private int maxPrice = 0;
    private int maxTime = 0;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JPanel allCategoriesPanel;
    private javax.swing.JScrollPane allCategoriesScrollPane;
    private javax.swing.JPanel chickenPanel;
    private javax.swing.JScrollPane chickenScrollPane;
    private javax.swing.JComboBox cuisineBox;
    private javax.swing.JLabel cuisineLabel;
    private javax.swing.JComboBox difficultyBox;
    private javax.swing.JLabel difficultyLabel;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JPanel fishPanel;
    private javax.swing.JScrollPane fishScrollPane;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JComboBox maxPriceBox;
    private javax.swing.JLabel maxPriceLabel;
    private javax.swing.JComboBox maxTimeBox;
    private javax.swing.JLabel maxTimeLabel;
    private javax.swing.JPanel meatPanel;
    private javax.swing.JScrollPane meatScrollPane;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTabbedPane typeOfFoodPane;
    private javax.swing.JPanel vegoPanel;
    private javax.swing.JScrollPane vegoScrollPane;
    // End of variables declaration//GEN-END:variables
}